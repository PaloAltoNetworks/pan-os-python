name: CI/CD

on:
  push:
    branches:
      - master
      - develop
      - beta
      - alpha
      - '[0-9]+.x'
      - '[0-9]+.[0-9]+.x'
  pull_request:

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v4
        with:
          poetry-version: 1.0.10

      - name: Get poetry cache directory
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Cache poetry dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key:
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{
            hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-

      - name: Install dependencies
        run: poetry install

      - name: Test with pytest
        run: poetry run make test

  format:
    name: Check Code Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v4
        with:
          poetry-version: 1.0.10

      - name: Get poetry cache directory
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Cache poetry dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-poetry-3.7-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-3.7-

      - name: Install dependencies
        run: poetry install

      - name: Check formatting with black and isort
        run: poetry run make check-format

  release:
    name: Release
    if: github.event_name == 'push' && github.ref != 'refs/heads/develop'
    needs: [test, format]
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v4
        with:
          poetry-version: 1.0.10

      - name: Get poetry cache directory
        id: poetry-cache
        run: echo "::set-output name=dir::$(poetry config cache-dir)"

      - name: Cache poetry dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.poetry-cache.outputs.dir }}
          key: ${{ runner.os }}-poetry-3.7-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-3.7-

      - name: Install dependencies
        run: poetry install

      - name: Create release and publish
        id: release
        uses: cycjimmy/semantic-release-action@v2
        with:
          semantic_version: 17.1.1
          extra_plugins: |
            conventional-changelog-conventionalcommits@^4.4.0
            @semantic-release/git@^9.0.0
            @semantic-release/exec@^5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
